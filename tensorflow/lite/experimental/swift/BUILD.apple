# TensorFlow Lite for Swift

load("//tensorflow/lite:special_rules.bzl", "ios_visibility_whitelist", "tflite_ios_lab_runner")
load("//tensorflow/lite/experimental/ios:ios.bzl", "TFL_DEFAULT_TAGS", "TFL_DISABLED_SANITIZER_TAGS", "TFL_MINIMUM_OS_VERSION")
load("@build_bazel_rules_apple//apple:ios.bzl", "ios_application", "ios_static_framework", "ios_unit_test")
load("@build_bazel_rules_swift//swift:swift.bzl", "swift_library")

package(
    default_visibility = ["//visibility:private"],
    licenses = ["notice"],  # Apache 2.0
)

# TODO(b/153554551): investigate if separate delegate libraries can be made with same module_name
# If you don't need delegates and want to reduce size of the app, you can exclude Metal/Core ML
# delegate related dependencies from the rule.
# For example, if you don't want to use Core ML delegate:
# 1. add `exclude = ["Sources/CoreMLDelegate.swift"]` to `glob`, so that `srcs` would look like this:
#    ```
#    srcs = glob(
#        ["Sources/*.swift"],
#        exclude = ["Sources/CoreMLDelegate.swift"],
#    ),
# 2. remove "-Wl,-weak_framework,CoreML" from `linkopts`
# 3. remove "...:coreml_delegate" from `deps`

swift_library(
    name = "TensorFlowLite",
    srcs = glob(["Sources/*.swift"]),
    linkopts = [
        "-Wl,-weak_framework,CoreML",
        "-Wl,-weak_framework,Metal",
    ],
    module_name = "TensorFlowLite",
    tags = TFL_DEFAULT_TAGS,
    visibility = ios_visibility_whitelist(),
    deps = [
        "//tensorflow/lite/delegates/gpu:metal_delegate",
        "//tensorflow/lite/experimental/delegates/coreml:coreml_delegate",
        "//tensorflow/lite/experimental/ios:tensorflow_lite_c",
    ],
)

# bazel build -c opt --config=ios_fat //tensorflow/lite/experimental/swift:TensorFlowLite_framework
ios_static_framework(
    name = "TensorFlowLite_framework",
    avoid_deps = [
        "//tensorflow/lite/experimental/ios:tensorflow_lite_c",
    ],
    bundle_name = "TensorFlowLite",
    minimum_os_version = TFL_MINIMUM_OS_VERSION,
    deps = [
        ":TensorFlowLite",
    ],
)

ios_unit_test(
    name = "Tests",
    size = "small",
    minimum_os_version = TFL_MINIMUM_OS_VERSION,
    runner = tflite_ios_lab_runner("IOS_LATEST"),
    tags = TFL_DEFAULT_TAGS + TFL_DISABLED_SANITIZER_TAGS,
    deps = [
        ":TestsLibrary",
    ],
)

swift_library(
    name = "TestsLibrary",
    testonly = 1,
    srcs = glob(["Tests/*.swift"]),
    tags = TFL_DEFAULT_TAGS,
    deps = [
        ":Resources",
        ":TensorFlowLite",
    ],
)

ios_application(
    name = "TestApp",
    app_icons = glob(["TestApp/TestApp/Assets.xcassets/AppIcon.appiconset/**"]),
    bundle_id = "com.tensorflow.lite.swift.TestApp",
    families = [
        "ipad",
        "iphone",
    ],
    infoplists = ["TestApp/TestApp/Info.plist"],
    minimum_os_version = TFL_MINIMUM_OS_VERSION,
    sdk_frameworks = [
        "CoreGraphics",
    ],
    tags = TFL_DEFAULT_TAGS,
    deps = [
        ":TestAppLibrary",
    ],
)

swift_library(
    name = "TestAppLibrary",
    srcs = glob(["TestApp/TestApp/*.swift"]),
    data = glob(["TestApp/TestApp/Base.lproj/*.storyboard"]),
    module_name = "TestApp",
    tags = TFL_DEFAULT_TAGS + ["manual"],
    deps = [
        ":Resources",
        ":TensorFlowLite",
    ],
)

objc_library(
    name = "Resources",
    data = [
        "//tensorflow/lite:testdata/add.bin",
        "//tensorflow/lite:testdata/add_quantized.bin",
        "//tensorflow/lite:testdata/multi_add.bin",
    ],
    tags = TFL_DEFAULT_TAGS,
)
